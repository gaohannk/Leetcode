package leetcode.algo.m;

import java.util.*;

/**
 * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
 *
 * We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 *
 * Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.
 *
 *
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 *
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 *
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 *
 *
 * Note:
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 */
public class MinimizeMalwareSpread2 {
    static class UnionFind {
        int[] parent;

        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < n; ++i) {
                parent[i] = i;
            }
        }

        public int find(int x) {
            while (x != parent[x]) {
                x = parent[x];
            }
            return x;
        }

        public void union(int x, int y) {
            parent[find(x)] = find(y);
        }

        public boolean isConnected(int x, int y) {
            return find(x) == find(y);
        }

    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        UnionFind uf = new UnionFind(graph.length);
        for (int i = 0; i < graph.length; i++) {
            for (int j = i + 1; j < graph.length; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < initial.length; i++) {
            set.add(initial[i]);
        }
        // key is root of component, value is list of node if belong to this component
        Map<Integer, List<Integer>> totalMap = new HashMap<>();

        for (int i = 0; i < graph.length; i++) {
            int root = uf.find(uf.parent[i]);
            if (totalMap.get(root) == null) {
                totalMap.put(root, new ArrayList<>());
            }
            totalMap.get(root).add(i);
        }

        int max = -1;
        int res = -1;
        for (int i = 0; i < graph.length; i++) {
            // pass not infected
            if(!set.contains(i)){
                continue;
            }
            int key = uf.find(uf.parent[i]);
            if (totalMap.containsKey(key)) {
                int count =0;
                for(int id: totalMap.get(key)){
                    if(set.contains(id)){
                        count++;
                    }
                }
                if (count == 1) {
                    if(max < totalMap.get(key).size()){
                        max = Math.max(max, totalMap.get(key).size());
                        res = i;
                    }else if (totalMap.get(key).size() == max) {
                        // As we want to min node id
                        res = Math.min(res, i);
                    }
                }
            }
        }

        // All component infect more than 2 size, so remove the infect node with minimum id.
        if (res == -1) {
            Arrays.sort(initial);
            return initial[0];
        }
        return res;
    }

    public static void main(String[] args) {
        int[][] graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = {0, 1};
        System.out.println(minMalwareSpread(graph, initial));

        graph = new int[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        initial = new int[]{0, 2};
        System.out.println(minMalwareSpread(graph, initial));

        graph = new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        initial = new int[]{1, 2};
        System.out.println(minMalwareSpread(graph, initial));

    }
}
