package leetcode.algo.m;

import java.util.*;

/**
 * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
 *
 * We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 *
 * Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.
 *
 *
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 *
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 *
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 *
 *
 * Note:
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 */
public class MinimizeMalwareSpread3 {
    static class UnionFind {
        int[] p, sz;

        UnionFind(int N) {
            p = new int[N];
            for (int x = 0; x < N; ++x)
                p[x] = x;

            sz = new int[N];
            Arrays.fill(sz, 1);
        }

        public int find(int x) {
            if (p[x] != x)
                p[x] = find(p[x]);
            return p[x];
        }

        public void union(int x, int y) {
            int xr = find(x);
            int yr = find(y);
            p[xr] = yr;
            sz[yr] += sz[xr];
        }

        public int size(int x) {
            return sz[find(x)];
        }
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        UnionFind uf = new UnionFind(N);
        for (int i = 0; i < N; ++i)
            for (int j = i+1; j < N; ++j)
                if (graph[i][j] == 1)
                    uf.union(i, j);

        int[] count = new int[N];
        for (int node: initial)
            count[uf.find(node)]++;

        int ans = -1, ansSize = -1;
        for (int node: initial) {
            int root = uf.find(node);
            if (count[root] == 1) {  // unique color
                int rootSize = uf.size(root);
                if (rootSize > ansSize) {
                    ansSize = rootSize;
                    ans = node;
                } else if (rootSize == ansSize && node < ans) {
                    ansSize = rootSize;
                    ans = node;
                }
            }
        }

        if (ans == -1) {
            ans = Integer.MAX_VALUE;
            for (int node: initial)
                ans = Math.min(ans, node);
        }
        return ans;
    }

    public static void main(String[] args) {
        int[][] graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = {0, 1};
        System.out.println(minMalwareSpread(graph, initial));

        graph = new int[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        initial = new int[]{0, 2};
        System.out.println(minMalwareSpread(graph, initial));

        graph = new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        initial = new int[]{1, 2};
        System.out.println(minMalwareSpread(graph, initial));

    }
}
